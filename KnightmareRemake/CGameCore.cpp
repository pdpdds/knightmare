#include "CGameCore.h"
#include "CGameMusicManager.h"
#include "CDirectDrawMethod.h"
#include "CInputManager.h"

CGameCore* CGameCore::m_pGameCore = NULL;
BOOL CGameCore::m_bPaused = FALSE;
HWND CGameCore::m_hWnd = NULL;
BOOL CGameCore::m_bLevelReset = FALSE;
INT CGameCore::iStageNum = 1;

CGameCore::CGameCore(void)
{
	
}

CGameCore::~CGameCore(void)
{
}

BOOL CGameCore::Initialize(HINSTANCE hInstance, HWND hWnd, int xres, int yres)
{
	DirectDrawMethod::GetInstance()->Initialize(hWnd, xres, yres);	

	CGameMusicManager::GetInstance()->Initialize(hWnd);

	CInputManager::GetInstance()->Initialize(hInstance, hWnd);

	InitStage();

	return TRUE;
}

int misaile_sprite = 0;
int x_p = 240, y_p = 440;

int Map_Masung1[312][17] = {
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,6,5,6,6,6,6,6,5,6,6,6,6},
	{6,6,6,6,6,5,6,6,6,6,6,5,6,6,6,6},
	{6,6,6,6,6,5,6,6,6,6,6,5,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{0,2,1,1,1,1,1,1,1,1,1,1,1,1,0,2},
	{13,14,14,14,14,14,14,15,14,14,14,14,14,14,14,15},
	{13,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15} };


int Map_Masung2[324][17] = {
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,10,13,13,13,13,13,13,13,13,13,13,13},
	{12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12},
	{11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,13,13,13,13,13,10,13,13,13,13,13,13},
	{12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12},
	{11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,13,10,13,13,13,13,13,10,13,13,13,13},
	{12,12,12,12,12,10,12,12,12,12,12,10,12,12,12,12},
	{11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,13,13,13,13,10,13,13,13,13,13,13,13},
	{11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,13,13,13,13,13,10,13,13,13,13,13,13},
	{11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,3,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,10,13,13,13,13,13,13,13,13,13,13,13,13,13},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{12,12,10,12,12,12,12,12,12,12,12,12,12,12,12,12},
	{11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,10,13,13,13,13,13,13,13,13,13,13,13},
	{12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12},
	{11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,13,13,13,13,13,10,13,13,13,13,13,13},
	{12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12},
	{11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,10,13,13,13,13,13,13,13,13,13,13,13},
	{12,12,12,12,10,12,12,12,12,12,12,12,12,12,12,12},
	{11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{13,13,13,13,13,13,13,13,13,10,13,13,13,13,13,13},
	{12,12,12,12,12,12,12,12,12,10,12,12,12,12,12,12},
	{11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{3,3,0,0,0,0,0,0,0,0,0,0,0,0,3,3},
	{2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{7,7,7,7,7,7,7,6,7,7,7,7,7,7,7,7},
	{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8} };

int Map_Num = 0;


int MapData1[20][26] =
{
	{8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,0,2,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,0,2,1,1,1,11,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,6,8,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,6,8,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,6,8,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12},
	{8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12} };

int MapData12[20][26] =
{
	{6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,3,3,0,0,0,9,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,11,11,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7},
	{8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8} };


struct time {
	int forward;
	int live;
	int x_inc;
	int y_inc;
	int x_count;
	int y_count;
	int start_x_location;
	int start_y_location;
}mi[2];
struct enemy {
	int sum;
	int map_count;
	int live;
	int x_inc;
	int y_inc;
	int x_count;
	int y_count;
	int enemy_type;
	int x_size;
	int y_size;
	int start_x_location;
	int start_y_location;
}enemy_info[500];

int e = 0, re = 0, fire = 0, enemy_fire, r1 = 1, r2 = 0;

LPDIRECTDRAWSURFACE7 lpPrimarySurface, lpBackSurface, EnemySurface, BGSurface;
LPDIRECTDRAWSURFACE7 BackGroundSurface, misaile, sk;
LPDIRECTDRAWSURFACE7 TempSurface[9], mummya, mummyb, bata, batb, ag, aa, ae, am, as, at, ar;

int Up_state = 0, Down_state = 0, Right_state = 0, Left_state = 0, boss_detect = 0, boss_present_sprite = 0;
int boss_x = 300, boss_y = -60, boss_bgm = 1, res = 0, bat_res = 0, sum = 0;

BOOL CGameCore::InitStage()
{
	mi[1].live = 0;	
	for (int u = 0; u < 500; u++)
	{
		enemy_info[u].sum = 0;
		enemy_info[u].live = 0;
		enemy_info[u].map_count = -1;
		enemy_info[u].enemy_type = 0;
	}
	// enemy information setting  start //
	enemy_info[0].map_count = 5;
	enemy_info[0].x_size = 35;
	enemy_info[0].y_size = 55;
	enemy_info[0].enemy_type = 1;
	enemy_info[0].y_count = 0;
	enemy_info[0].start_x_location = 80;
	enemy_info[0].start_y_location = 0;
	enemy_info[1].map_count = 8;
	enemy_info[1].x_size = 35;
	enemy_info[1].y_size = 55;
	enemy_info[1].enemy_type = 1;
	enemy_info[1].y_count = 0;
	enemy_info[1].start_x_location = 160;
	enemy_info[1].start_y_location = 0;
	enemy_info[2].map_count = 7;
	enemy_info[2].x_size = 35;
	enemy_info[2].y_size = 55;
	enemy_info[2].enemy_type = 1;
	enemy_info[2].y_count = 0;
	enemy_info[2].start_x_location = 400;
	enemy_info[2].start_y_location = 0;
	enemy_info[3].map_count = 9;
	enemy_info[3].x_size = 35;
	enemy_info[3].y_size = 55;
	enemy_info[3].enemy_type = 1;
	enemy_info[3].y_count = 0;
	enemy_info[3].start_x_location = 280;
	enemy_info[3].start_y_location = 0;
	enemy_info[4].map_count = 23;
	enemy_info[4].x_size = 35;
	enemy_info[4].y_size = 55;
	enemy_info[4].enemy_type = 1;
	enemy_info[4].y_count = 0;
	enemy_info[4].start_x_location = 200;
	enemy_info[4].start_y_location = 0;
	enemy_info[5].map_count = 25;
	enemy_info[5].x_size = 35;
	enemy_info[5].y_size = 55;
	enemy_info[5].enemy_type = 1;
	enemy_info[5].y_count = 0;
	enemy_info[5].start_x_location = 300;
	enemy_info[5].start_y_location = 0;
	enemy_info[6].map_count = 27;
	enemy_info[6].x_size = 35;
	enemy_info[6].y_size = 55;
	enemy_info[6].enemy_type = 1;
	enemy_info[6].y_count = 0;
	enemy_info[6].start_x_location = 80;
	enemy_info[6].start_y_location = 0;
	enemy_info[7].map_count = 30;
	enemy_info[7].x_size = 35;
	enemy_info[7].y_size = 55;
	enemy_info[7].enemy_type = 1;
	enemy_info[7].y_count = 0;
	enemy_info[7].start_x_location = 200;
	enemy_info[7].start_y_location = 0;
	enemy_info[8].map_count = 31;
	enemy_info[8].x_size = 35;
	enemy_info[8].y_size = 55;
	enemy_info[8].enemy_type = 1;
	enemy_info[8].y_count = 0;
	enemy_info[8].start_x_location = 500;
	enemy_info[8].start_y_location = 0;
	enemy_info[9].map_count = 33;
	enemy_info[9].x_size = 35;
	enemy_info[9].y_size = 55;
	enemy_info[9].enemy_type = 1;
	enemy_info[9].y_count = 0;
	enemy_info[9].start_x_location = 300;
	enemy_info[9].start_y_location = 0;
	enemy_info[10].map_count = 35;
	enemy_info[10].x_size = 35;
	enemy_info[10].y_size = 55;
	enemy_info[10].enemy_type = 1;
	enemy_info[10].y_count = 0;
	enemy_info[10].start_x_location = 100;
	enemy_info[10].start_y_location = 0;
	enemy_info[11].map_count = 38;
	enemy_info[11].x_size = 35;
	enemy_info[11].y_size = 55;
	enemy_info[11].enemy_type = 1;
	enemy_info[11].y_count = 0;
	enemy_info[11].start_x_location = 150;
	enemy_info[11].start_y_location = 0;
	enemy_info[12].map_count = 40;
	enemy_info[12].x_size = 35;
	enemy_info[12].y_size = 55;
	enemy_info[12].enemy_type = 1;
	enemy_info[12].y_count = 0;
	enemy_info[12].start_x_location = 350;
	enemy_info[12].start_y_location = 0;
	enemy_info[13].map_count = 42;
	enemy_info[13].x_size = 35;
	enemy_info[13].y_size = 55;
	enemy_info[13].enemy_type = 1;
	enemy_info[13].y_count = 0;
	enemy_info[13].start_x_location = 400;
	enemy_info[13].start_y_location = 0;
	enemy_info[14].map_count = 46;
	enemy_info[14].x_size = 50;
	enemy_info[14].y_size = 30;
	enemy_info[14].enemy_type = 2;
	enemy_info[14].y_count = 0;
	enemy_info[14].start_x_location = 200;
	enemy_info[14].start_y_location = 0;
	enemy_info[15].map_count = 46;
	enemy_info[15].x_size = 50;
	enemy_info[15].y_size = 30;
	enemy_info[15].enemy_type = 2;
	enemy_info[15].y_count = 0;
	enemy_info[15].start_x_location = 200;
	enemy_info[15].start_y_location = -30;
	enemy_info[16].map_count = 46;
	enemy_info[16].x_size = 50;
	enemy_info[16].y_size = 30;
	enemy_info[16].enemy_type = 2;
	enemy_info[16].y_count = 0;
	enemy_info[16].start_x_location = 200;
	enemy_info[16].start_y_location = -60;
	enemy_info[17].map_count = 46;
	enemy_info[17].x_size = 50;
	enemy_info[17].y_size = 30;
	enemy_info[17].enemy_type = 2;
	enemy_info[17].y_count = 0;
	enemy_info[17].start_x_location = 200;
	enemy_info[17].start_y_location = -90;
	enemy_info[18].map_count = 46;
	enemy_info[18].x_size = 50;
	enemy_info[18].y_size = 30;
	enemy_info[18].enemy_type = 2;
	enemy_info[18].y_count = 0;
	enemy_info[18].start_x_location = 200;
	enemy_info[18].start_y_location = -120;
	enemy_info[19].map_count = 54;
	enemy_info[19].x_size = 50;
	enemy_info[19].y_size = 30;
	enemy_info[19].enemy_type = 2;
	enemy_info[19].y_count = 0;
	enemy_info[19].start_x_location = 400;
	enemy_info[19].start_y_location = 0;
	enemy_info[20].map_count = 54;
	enemy_info[20].x_size = 50;
	enemy_info[20].y_size = 30;
	enemy_info[20].enemy_type = 2;
	enemy_info[20].y_count = 0;
	enemy_info[20].start_x_location = 400;
	enemy_info[20].start_y_location = -30;
	enemy_info[21].map_count = 54;
	enemy_info[21].x_size = 50;
	enemy_info[21].y_size = 30;
	enemy_info[21].enemy_type = 2;
	enemy_info[21].y_count = 0;
	enemy_info[21].start_x_location = 400;
	enemy_info[21].start_y_location = -60;
	enemy_info[22].map_count = 54;
	enemy_info[22].x_size = 50;
	enemy_info[22].y_size = 30;
	enemy_info[22].enemy_type = 2;
	enemy_info[22].y_count = 0;
	enemy_info[22].start_x_location = 400;
	enemy_info[22].start_y_location = -90;
	enemy_info[23].map_count = 54;
	enemy_info[23].x_size = 50;
	enemy_info[23].y_size = 30;
	enemy_info[23].enemy_type = 2;
	enemy_info[23].y_count = 0;
	enemy_info[23].start_x_location = 400;
	enemy_info[23].start_y_location = -120;
	enemy_info[24].map_count = 62;
	enemy_info[24].x_size = 50;
	enemy_info[24].y_size = 30;
	enemy_info[24].enemy_type = 2;
	enemy_info[24].y_count = 0;
	enemy_info[24].start_x_location = 300;
	enemy_info[24].start_y_location = 0;
	enemy_info[25].map_count = 62;
	enemy_info[25].x_size = 50;
	enemy_info[25].y_size = 30;
	enemy_info[25].enemy_type = 2;
	enemy_info[25].y_count = 0;
	enemy_info[25].start_x_location = 300;
	enemy_info[25].start_y_location = -30;
	enemy_info[26].map_count = 62;
	enemy_info[26].x_size = 50;
	enemy_info[26].y_size = 30;
	enemy_info[26].enemy_type = 2;
	enemy_info[26].y_count = 0;
	enemy_info[26].start_x_location = 300;
	enemy_info[26].start_y_location = -60;
	enemy_info[27].map_count = 62;
	enemy_info[27].x_size = 50;
	enemy_info[27].y_size = 30;
	enemy_info[27].enemy_type = 2;
	enemy_info[27].y_count = 0;
	enemy_info[27].start_x_location = 300;
	enemy_info[27].start_y_location = -90;
	enemy_info[28].map_count = 62;
	enemy_info[28].x_size = 50;
	enemy_info[28].y_size = 30;
	enemy_info[28].enemy_type = 2;
	enemy_info[28].y_count = 0;
	enemy_info[28].start_x_location = 300;
	enemy_info[28].start_y_location = -120;
	enemy_info[29].map_count = 70;
	enemy_info[29].x_size = 50;
	enemy_info[29].y_size = 30;
	enemy_info[29].enemy_type = 3;
	enemy_info[29].y_count = 0;
	enemy_info[29].start_x_location = 0;
	enemy_info[29].start_y_location = 0;
	enemy_info[30].map_count = 71;
	enemy_info[30].x_size = 50;
	enemy_info[30].y_size = 30;
	enemy_info[30].enemy_type = 3;
	enemy_info[30].y_count = 0;
	enemy_info[30].start_x_location = 0;
	enemy_info[30].start_y_location = 0;
	enemy_info[31].map_count = 72;
	enemy_info[31].x_size = 50;
	enemy_info[31].y_size = 30;
	enemy_info[31].enemy_type = 3;
	enemy_info[31].y_count = 0;
	enemy_info[31].start_x_location = 0;
	enemy_info[31].start_y_location = 0;
	enemy_info[32].map_count = 73;
	enemy_info[32].x_size = 50;
	enemy_info[32].y_size = 30;
	enemy_info[32].enemy_type = 3;
	enemy_info[32].y_count = 0;
	enemy_info[32].start_x_location = 0;
	enemy_info[32].start_y_location = 0;
	enemy_info[33].map_count = 74;
	enemy_info[33].x_size = 50;
	enemy_info[33].y_size = 30;
	enemy_info[33].enemy_type = 3;
	enemy_info[33].y_count = 0;
	enemy_info[33].start_x_location = 0;
	enemy_info[33].start_y_location = 0;
	// enemy information setting end //

	SetCursor(NULL);
	if ((aa = DirectDrawMethod::GetInstance()->Load_Bitmap("aa.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(aa, RGB(0, 0, 0));

	if ((ar = DirectDrawMethod::GetInstance()->Load_Bitmap("ar.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(ar, RGB(0, 0, 0));

	if ((am = DirectDrawMethod::GetInstance()->Load_Bitmap("am.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(am, RGB(0, 0, 0));

	if ((ae = DirectDrawMethod::GetInstance()->Load_Bitmap("ae.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(ae, RGB(0, 0, 0));
	if ((at = DirectDrawMethod::GetInstance()->Load_Bitmap("at.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(at, RGB(0, 0, 0));
	if ((ag = DirectDrawMethod::GetInstance()->Load_Bitmap("ag.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(ag, RGB(0, 0, 0));
	if ((as = DirectDrawMethod::GetInstance()->Load_Bitmap("as.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(as, RGB(0, 0, 0));
	if ((BGSurface = DirectDrawMethod::GetInstance()->Load_Bitmap("tile.bmp", 0)) == NULL)
		exit(0);
	if ((mummya = DirectDrawMethod::GetInstance()->Load_Bitmap("mummya.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(mummya, RGB(0, 0, 0));
	if ((mummyb = DirectDrawMethod::GetInstance()->Load_Bitmap("mummyb.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(mummyb, RGB(0, 0, 0));
	if ((bata = DirectDrawMethod::GetInstance()->Load_Bitmap("bata.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(bata, RGB(0, 0, 0));
	if ((batb = DirectDrawMethod::GetInstance()->Load_Bitmap("batb.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(batb, RGB(0, 0, 0));
	if ((sk = DirectDrawMethod::GetInstance()->Load_Bitmap("sk.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(sk, RGB(0, 0, 0));

	if ((EnemySurface = DirectDrawMethod::GetInstance()->Load_Bitmap("sprite.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(EnemySurface, RGB(0, 0, 0));
	if ((misaile = DirectDrawMethod::GetInstance()->Load_Bitmap("arrow.bmp", 0)) == NULL)
		exit(0);
	DirectDrawMethod::GetInstance()->Set_ColorKey(misaile, RGB(0, 0, 0));
	SetTimer(m_hWnd, 1, 980, NULL);
	//mp3_play("test.mp3");
	//PlayMidi("Kmare.mid", g_hWnd);
	mi[0].y_inc = (-40); mi[1].y_inc = (-40);

	return TRUE;
}


void CGameCore::UpdateGameStatus()
{
	/*if (Map_Num == 292)
		if (boss_bgm == 1) {
			boss_bgm = 0;
			PlayMidi("mare.mid", NULL);
		}*/

	int xa, ya, a = 11, b = 0;

	LPDIRECTDRAWSURFACE7 lpBackSurface = DirectDrawMethod::GetInstance()->GetBackBuffer();

	DirectDrawMethod::GetInstance()->FillSurface(lpBackSurface, 0);

	SetCursor(NULL);
	//if(FAILED(Blit_Surface(lpBackSurface, 0, 0,1020,760, BackGroundSurface, 0, 0 , 1020, 760,0)))
	//				exit(0);
	for (xa = 0; xa < 16; xa++) {
		a = 11;
		for (ya = 0; ya < 12; ya++)
		{
			if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, xa * 40, a * 40, 40, 40, BGSurface, Map_Masung1[ya + Map_Num][xa] * 40, Map_Masung2[ya + Map_Num][xa] * 40, 40, 40, 0)))
				exit(0);
			a--;
		}
	}
	if (boss_present_sprite == 1)
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, boss_x, boss_y, 55, 72, sk, 1, 1, 55, 72, 1))) {
			exit(0);
		}
	if (boss_detect == 1) {
		boss_present_sprite = 0;
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, boss_x, boss_y, 55, 72, sk, 1, 1, 55, 72, 1))) {
			exit(0);
		}
	}


	for (b = 0; b < 500; b++) {
		if (enemy_info[b].live == 1) {
			if (enemy_info[b].enemy_type == 1)
			{
				if ((res / 7) == 0)
					if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, enemy_info[b].start_x_location, enemy_info[b].start_y_location + enemy_info[b].y_inc * enemy_info[b].y_count, enemy_info[b].x_size, enemy_info[b].y_size, mummya, 0, 0, enemy_info[b].x_size, enemy_info[b].y_size, 1)))
						exit(0);
				if ((res / 7) == 1)
					if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, enemy_info[b].start_x_location, enemy_info[b].start_y_location + enemy_info[b].y_inc * enemy_info[b].y_count, enemy_info[b].x_size, enemy_info[b].y_size, mummyb, 0, 0, enemy_info[b].x_size, enemy_info[b].y_size, 1)))
						exit(0);
				enemy_info[b].y_count++;
			}
			if (enemy_info[b].enemy_type == 2)
			{
				if ((bat_res / 3) == 0)
					if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, enemy_info[b].start_x_location, enemy_info[b].start_y_location + enemy_info[b].y_inc * enemy_info[b].y_count, enemy_info[b].x_size, enemy_info[b].y_size, bata, 0, 0, enemy_info[b].x_size, enemy_info[b].y_size, 1)))
						exit(0);
				if ((bat_res / 3) == 1)
					if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, enemy_info[b].start_x_location, enemy_info[b].start_y_location + enemy_info[b].y_inc * enemy_info[b].y_count, enemy_info[b].x_size, enemy_info[b].y_size, batb, 0, 0, enemy_info[b].x_size, enemy_info[b].y_size, 1)))
						exit(0);
				enemy_info[b].y_count++;
			}
			if (enemy_info[b].enemy_type == 3)
			{
				if (r1 == 1) {
					enemy_info[b].sum = enemy_info[b].start_x_location + enemy_info[b].x_inc * enemy_info[b].x_count;
					if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, enemy_info[b].sum, enemy_info[b].start_y_location + enemy_info[b].y_inc * enemy_info[b].y_count++, enemy_info[b].x_size, enemy_info[b].y_size, bata, 0, 0, enemy_info[b].x_size, enemy_info[b].y_size, 1)))
						exit(0);
				}
				if (r2 == 1)
					if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, enemy_info[b].sum + enemy_info[b].x_inc * enemy_info[b].x_count, enemy_info[b].start_y_location + enemy_info[b].y_inc * enemy_info[b].y_count++, enemy_info[b].x_size, enemy_info[b].y_size, bata, 0, 0, enemy_info[b].x_size, enemy_info[b].y_size, 1)))
						exit(0);
				enemy_info[b].x_count++;
			}
		}
	}
	if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, x_p, y_p, 40, 40, EnemySurface, (40 * re), 0, 40, 40, 1)))
		exit(0);
	bat_res++;
	if (bat_res == 6)
		bat_res = 0;
	res++;
	if (res == 14)
		res = 0;

	re++;
	if (re == 2)
		re = 0;/*
			 else{	if(FAILED(Blit_Surface(lpBackSurface, x_p, y_p,55,72, TempSurface[anime], (57*j)+1, 1 , 55, 72,1)))
			 exit(0);}		 if(enemy_fire==1){
			 if(FAILED(Blit_Surface(lpBackSurface,mi[1].start_x_location+mi[1].x_inc*mi[1].x_count,mi[1].start_y_location+mi[1].y_inc*mi[1].y_count,20,20, misaile,0, mi[1].forward*20, 20, 20,1)))
			 exit(0);
			 mi[1].x_count++;mi[1].y_count++;
			 }
			 */




	if (misaile_sprite > 0)
	{
		if (mi[0].live == 1) {
			if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, mi[0].start_x_location, mi[0].start_y_location + mi[0].y_inc * mi[0].y_count, 40, 40, misaile, 0, 0, 40, 40, 1)))
				exit(0);
			mi[0].y_count++;
			if (mi[0].start_y_location + mi[0].y_inc * mi[0].y_count < 0) {
				mi[0].live = 0;
				mi[0].y_count = 1;
			}
		}
		if (mi[1].live == 1) {
			if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, mi[1].start_x_location, mi[1].start_y_location + mi[1].y_inc * mi[1].y_count, 40, 40, misaile, 0, 0, 40, 40, 1)))
				exit(0);
			mi[1].y_count++;
			if (mi[1].start_y_location + mi[1].y_inc * mi[1].y_count < 0) {
				mi[1].live = 0;
				mi[1].y_count = 1;
			}
		}
		if (mi[0].live == 0 && mi[1].live == 0)
			misaile_sprite = 0;
	}
	if (Map_Num > 1 && Map_Num < 5) {
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 120, 200, 40, 40, ag, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 160, 200, 40, 40, aa, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 200, 200, 40, 40, am, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 240, 200, 40, 40, ae, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 320, 200, 40, 40, as, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 360, 200, 40, 40, at, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 400, 200, 40, 40, aa, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 440, 200, 40, 40, ar, 0, 0, 40, 40, 1)))
			exit(0);
		if (FAILED(DirectDrawMethod::GetInstance()->Blit_Surface(lpBackSurface, 480, 200, 40, 40, at, 0, 0, 40, 40, 1)))
			exit(0);
	}
	//lpPrimarySurface->Flip(NULL, DDFLIP_WAIT);
}

int i = 0, j = 0;
int ani_num = 0, head = 0;
int player_die = 0, die_anime = 0;
int anime = 0, Enemy_x = 900, Enemy_y = 350;

BOOL checkrect() {
	int x_l, y_l, x_l2, y_l2, y_l1;
	x_l2 = ((x_p + 32) / 40);
	x_l = ((x_p) / 40);
	y_l = ((y_p - 8) / 40);
	y_l2 = ((y_p - 40) / 40);
	y_l1 = y_p / 40;
	if (Right_state == 1)
		if ((Map_Masung1[Map_Num + 10 - y_l2][x_l + 1] == 1) && (Map_Masung2[Map_Num + 10 - y_l2][x_l + 1] == 0))
			if ((Map_Masung1[Map_Num + 10 - y_l][x_l + 1] == 1) && (Map_Masung2[Map_Num + 10 - y_l][x_l + 1] == 0))
				return TRUE;
	if (Left_state == 1)
		if ((Map_Masung1[Map_Num + 10 - y_l2][x_l2 - 1] == 1) && (Map_Masung2[Map_Num + 10 - y_l2][x_l2 - 1] == 0))
			if ((Map_Masung1[Map_Num + 10 - y_l][x_l2 - 1] == 1) && (Map_Masung2[Map_Num + 10 - y_l][x_l2 - 1] == 0))
				return TRUE;
	if (Up_state == 1)
		if ((((Map_Masung1[Map_Num + 11 - y_l][x_l] == 1) && (Map_Masung2[Map_Num + 11 - y_l][x_l] == 0)) || (((Map_Masung1[Map_Num + 11 - y_l][x_l] == 5) && (Map_Masung2[Map_Num + 11 - y_l][x_l] == 10)) && ((Map_Masung1[Map_Num + 11 - y_l][x_l2] == 5) && (Map_Masung2[Map_Num + 11 - y_l][x_l2] == 10)))))
			return TRUE;
	if (Down_state == 1)
		if ((((Map_Masung1[Map_Num + 10 - y_l1][x_l] == 1) && (Map_Masung2[Map_Num + 10 - y_l1][x_l] == 0)) || (((Map_Masung1[Map_Num + 10 - y_l1][x_l] == 5) && (Map_Masung2[Map_Num + 10 - y_l1][x_l] == 10)) && ((Map_Masung1[Map_Num + 10 - y_l1][x_l2] == 5) && (Map_Masung2[Map_Num + 10 - y_l1][x_l2] == 10)))))
			return TRUE;
	return FALSE;
}
void enemy_fire_routine() {
	int minus, minus2;
	if (x_p > Enemy_x)
		minus = x_p - Enemy_x;
	else minus = Enemy_x - x_p;
	if (y_p > Enemy_y)
		minus2 = y_p - Enemy_y;
	else minus2 = Enemy_y - y_p;
	if (minus < 30 || minus2 < 15)
	{
		if (mi[1].live != 1) {
			mi[1].x_count = 1; mi[1].y_count = 1;
			mi[1].start_x_location = Enemy_x;
			mi[1].start_y_location = Enemy_y;
			enemy_fire = 1;
			mi[1].live = 1;
			if (minus > minus2) {
				if (x_p > Enemy_x)
				{
					mi[1].x_inc = 20; mi[1].forward = 1; mi[1].y_inc = 0;
				}
				else { mi[1].x_inc = (-20); mi[1].forward = 3; mi[1].y_inc = 0; }
			}
			else {
				if (y_p > Enemy_y)
				{
					mi[1].y_inc = 20; mi[1].forward = 2; mi[1].x_inc = 0;
				}
				else { mi[1].y_inc = (-20); mi[1].forward = 0; mi[1].x_inc = 0; }
			}
		}
	}
}
void checkrect2() {
	int x_l, y_l;
	x_l = mi[1].start_x_location + mi[1].x_inc * mi[1].x_count;
	y_l = mi[1].start_y_location + mi[1].y_inc * mi[1].y_count;
	if (x_l < 0 || x_l>1024)
	{
		mi[1].live = 0;
		enemy_fire = 0;
	}
	if (y_l < 0 || y_l>760)
	{
		mi[1].live = 0;
		enemy_fire = 0;
	}

}
void hit(HWND hwnd) {
	int temp1, temp2;

	temp1 = mi[1].start_x_location + mi[1].x_inc * (mi[1].x_count - 1);
	temp2 = mi[1].start_y_location + mi[1].y_inc * (mi[1].y_count - 1);
	if (temp1 > x_p && temp1<x_p + 55 && temp2>y_p && temp2 < y_p + 72)
		// SendMessage(hwnd,WM_DESTROY,0,0); 
		player_die = 1;

}
void building_enemy(int flag, int flag1) {
	if ((Enemy_x > 660 && Enemy_x < 800) && (Enemy_y > 480 && Enemy_y < 600)) {
		if (flag) {
			if (Enemy_x < 740)
				Enemy_x -= 5;
			else
				Enemy_x += 5;
		}
		if (flag1) {
			if (Enemy_y < 580)
				Enemy_y -= 5;
			else
				Enemy_y += 5;
		}
	}
}

void CGameCore::ProcessInput(HWND hwnd)
{
	if (CInputManager::GetInstance()->GetKeyBoardDevice())
	{
		BYTE KeyState[256];
		HRESULT hResult;

		for (;;)
		{
			hResult = CInputManager::GetInstance()->GetKeyBoardDevice()->GetDeviceState(sizeof(KeyState), &KeyState);

			if (hResult == DIERR_INPUTLOST)
			{
				hResult = CInputManager::GetInstance()->GetKeyBoardDevice()->Acquire();

				if (hResult != DI_OK)
				{
					break;
				}
			}
			else break;
		}

		if (hResult == DI_OK)
		{
			int Down_stats = 0, Right_stats = 0, Up_stats = 0, Left_stats = 0;


			int x_l, y_l, x_l2;
			x_l = (x_p) / 40;
			y_l = (y_p) / 40;
			x_l2 = (x_p + 32) / 40;
			if (head == 1)
			{
				head = 0;
				if (!(((Map_Masung1[Map_Num + 11 - y_l][x_l] == 1) && (Map_Masung2[Map_Num + 11 - y_l][x_l] == 0)) || (((Map_Masung1[Map_Num + 11 - y_l][x_l] == 5) && (Map_Masung2[Map_Num + 11 - y_l][x_l] == 10)) && ((Map_Masung1[Map_Num + 11 - y_l][x_l2] == 5) && (Map_Masung2[Map_Num + 11 - y_l][x_l2] == 10)))))
				{
					y_p = y_l * 40;
					y_p = y_p + 40;
				}
			}



			if (KEYDOWN(KeyState, DIK_RIGHT))
			{
				Right_state = 1; Right_stats = 1;
				if (checkrect() == TRUE) {

					if (x_p < 520)
						x_p += 8;
				}
				Right_state = 0;
			}
			else if (KEYDOWN(KeyState, DIK_LEFT))
			{
				Left_state = 1; Left_stats = 1;
				if (checkrect() == TRUE) {
					if (x_p > 80)
						x_p -= 8;
				}
				Left_state = 0;
			}

			if (KEYDOWN(KeyState, DIK_UP))
			{
				Up_state = 1;	Up_stats = 1;
				if (checkrect() == TRUE) {
					if (y_p > 80)
						y_p -= 8;
				}
				Up_state = 0;
			}
			else if (KEYDOWN(KeyState, DIK_DOWN))
			{
				Down_state = 1; Down_stats = 1;
				if (checkrect() == TRUE) {
					if (y_p < 440)
						y_p += 8;
				}
				Down_state = 0;
			}

			if (Map_Num < 293 || Map_Num>300) {
				if (KEYDOWN(KeyState, DIK_SPACE))
				{
					misaile_sprite = 1;

					if (mi[0].live != 1) {
						mi[0].live = 1;
						mi[0].x_count = 1; mi[0].y_count = 1;
						mi[0].start_x_location = x_p; mi[0].start_y_location = y_p;
						fire = 1;
					}
					else if (mi[1].live != 1) {
						mi[1].live = 1;
						mi[1].x_count = 1; mi[1].y_count = 1;
						mi[1].start_x_location = x_p; mi[1].start_y_location = y_p;
						fire = 1;
					}
				}
			}


			if (Up_state == 1 && Right_state == 1)
			{
				j--;
				anime = 1;
			}
			if (Up_state == 1 && Left_state == 1)
			{
				j--;
				anime = 3;
			}
			if (Down_state == 1 && Right_state == 1)
			{
				j--;
				anime = 7;
			}
			if (Down_state == 1 && Left_state == 1)
			{
				j--;
				anime = 5;
			}

			if (j > 2)
				j = 0;
		}

		if (KEYDOWN(KeyState, DIK_UP))
		{
			ProcessDirective(0, -1);
		}
		else if (KEYDOWN(KeyState, DIK_LEFT))
		{
			ProcessDirective(-1, 0);
		}
		else if (KEYDOWN(KeyState, DIK_DOWN))
		{
			ProcessDirective(0, 1);
		}
		else if (KEYDOWN(KeyState, DIK_RIGHT))
		{
			ProcessDirective(1, 0);
		}
	}

}

void enemy_cal() {
	int y;
	for (y = 0; y < 500; y++)
		if (enemy_info[y].map_count == Map_Num)
		{
			enemy_info[y].live = 1;
			if (enemy_info[y].enemy_type == 1)
			{
				enemy_info[y].y_inc = 2; enemy_info[y].x_inc = 0;
			}
			if (enemy_info[y].enemy_type == 2)
			{
				enemy_info[y].y_inc = 4; enemy_info[y].x_inc = 0;
			}
			if (enemy_info[y].enemy_type == 3)
			{
				if (r1 == 1) {
					enemy_info[y].y_inc = 1; enemy_info[y].x_inc = 8;
					if ((enemy_info[y].sum) > 100)
					{
						r1 = 0; r2 = 1; enemy_info[y].x_count = 0;
					}
				}
				if (r2 == 1) {
					enemy_info[y].y_inc = 1; enemy_info[y].x_inc = -8;
					if ((enemy_info[y].sum + enemy_info[y].x_inc * enemy_info[y].x_count) < 1)
					{
						r1 = 1; r2 = 0; enemy_info[y].x_count = 0; enemy_info[y].sum = 0;
					}
				}


			}

		}
}

void Enemy_move_routine() {
	int value, value2;
	int flag = 0, flag1 = 0;
	if (Enemy_x > x_p)
		value = Enemy_x - x_p;
	else value = x_p - Enemy_x;
	if (Enemy_y > y_p)
		value2 = Enemy_y - y_p;
	else value2 = y_p - Enemy_y;
	if (value > value2) {
		if (Enemy_x > x_p)
		{
			Enemy_x -= 5; e = 3; flag = 1;
		}
		else if (Enemy_x < x_p)
		{
			Enemy_x += 5; e = 1; flag = 1;
		}
	}
	else {
		if (Enemy_y > y_p)
		{
			Enemy_y -= 5; e = 0; flag1 = 1;
		}
		else if (Enemy_y < y_p)
		{
			Enemy_y += 5; e = 2; flag1 = 1;
		}
	}
	building_enemy(flag, flag1);
}

BOOL CGameCore::ProcessGame()
{	
	ProcessInput(m_hWnd);

	Enemy_move_routine();
	enemy_fire_routine();

	enemy_cal();
	UpdateGameStatus();
	Render();


	return TRUE;
}

void CGameCore::Render()
{	
	DirectDrawMethod::GetInstance()->Render();	
}

BOOL CGameCore::ProcessDirective(INT iX, INT iY)
{	

	return TRUE;
}

LRESULT CALLBACK CGameCore::WndProc (HWND opening, UINT iMsg, WPARAM wParam, LPARAM lParam)
{ 
	switch (iMsg)
	{		case WM_MOUSEMOVE:
	return 0;
	case WM_MOVE:
		//if( g_pDisplay )
		//	g_pDisplay->UpdateBounds();
		return 0L;

	case WM_ACTIVATE:
		if (wParam == WA_INACTIVE)
			m_bPaused = TRUE ;
		else
			m_bPaused = FALSE ;
		CInputManager::GetInstance()->SyncAcquire (m_bPaused, m_hWnd) ;
		break;
	case WM_KEYDOWN:
		switch (wParam) 
		{
		case VK_ESCAPE:
			CInputManager::GetInstance()->Release();
			DirectDrawMethod::GetInstance()->UninitDirectDraw();					
			DestroyWindow(m_hWnd);
			PostQuitMessage (0) ;
			break;
		case 'P':				
			m_bLevelReset = FALSE;			
			break;

		}
		return TRUE;

	case WM_TIMER:
		//if (Map_Num == 289)
			//PlayMidi(NULL, opening);

		if (Map_Num == 300)
		{
			KillTimer(opening, 1);
			boss_detect = 1;
		}
		else {
			if (Map_Num >= 293) {
				boss_present_sprite = 1;
				boss_y += 20;
			}
			Map_Num++;
			head = 1;
		}
		return 0;

	case WM_DESTROY :
		DirectDrawMethod::GetInstance()->UninitDirectDraw();					
		PostQuitMessage (0) ;
		break;

	}
	return DefWindowProc (opening, iMsg, wParam, lParam) ;

}


